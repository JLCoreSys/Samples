<?php
/**
 * This file is part of the CoreSysUserBundle package.
 * (c) J&L Core Systems http://jlcoresystems.com | http://joshmccreight.com
 */

namespace CoreSys\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\AST\Join;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{

    public function getUsersWithRole( Role $role = NULL )
    {
        if ( empty( $role ) ) {
            return $this->fetchAll();
        }

        $q = $this->createQueryBuilder( 'u' )
                  ->leftJoin( 'u.sys_roles', 'r' )
                  ->andWhere( 'r.id = :rid' )
                  ->setParameter( 'rid', $role->getId() )
                  ->getQuery();

        return $q->getResult();
    }

    public function getNewUsers( $days = 7 )
    {
        $date = new \DateTime();
        $date = $date->sub( new \DateInterval( 'P' . intval( $days ) . 'D' ) );
        $q    = $this->createQueryBuilder( 'u' )
                     ->where( 'u.created_at >= :date' )
                     ->setParameter( 'date', $date )
                     ->orderBy( 'u.created_at', 'desc' )
                     ->getQuery();

        return $q->getResult();
    }

    public function getUsers( $active = NULL )
    {
        $q = $this->createQueryBuilder( 'u' )
                  ->orderBy( 'u.created_at', 'desc' );

        if ( $active === TRUE || $active == FALSE ) {
            $q->where( 'u.enabled = :active' )
              ->setParameter( 'active', $active );
        }

        $q = $q->getQuery();

        return $q->getResult();
    }

    public function getUsersCount( $active = NULL, $from = NULL, $to = NULL )
    {
        $q = $this->createQueryBuilder( 'u' )
                  ->select( 'COUNT(u.id)' );

        if ( !empty( $active ) ) {
            $active = $active === TRUE;
            $q->where( 'a.enabled = :enabled' )
              ->setParameter( 'enabled', $active );
        }

        if ( $from instanceof \DateTime ) {
            $q->where( 'a.created_at >= :from' )
              ->setParameter( 'from', $from );
        }

        if ( $to instanceof \DateTime ) {
            $q->where( 'a.created_at <= :to' )
              ->setParameter( 'to', $to );
        }

        $q = $q->getQuery();

        return $q->getSingleScalarResult();
    }

    public function search( $sort = 'created_at', $sort_dir = 'desc', $offset = 0, $length = 50, $search_string = NULL, $search_col = NULL, $from = NULL, $to = NULL, Role $role = NULL )
    {
        $sort     = !empty( $sort ) ? $sort : 'created_at';
        $sort_dir = $sort_dir == 'asc' ? 'asc' : 'desc';

        $from = $from instanceof \DateTime ? $from : NULL;
        $to   = $to instanceof \DateTime ? $to : NULL;
        if ( empty( $from ) || empty( $to ) ) {
            $from = $to = NULL;
        }

        $q = $this->createQueryBuilder( 'u' )
                  ->orderBy( 'u.' . $sort, $sort_dir )
                  ->setFirstResult( $offset )
                  ->setMaxResults( $length );

        if ( !empty( $from ) ) {
            $q->where( 'u.created_at >= :from AND u.created_at <= :to' )
              ->setParameters( array( 'from' => $from, 'to' => $to ) );
        }

        if ( !empty( $search_string ) ) {
            $q->where( '(u.username LIKE :search OR u.email LIKE :search)' )
              ->setParameter( 'search', '%' . $search_string . '%' );
        }

        if ( !empty( $role ) ) {
            $role_ids = array();
            $this->addRoleIdsToSearch( $role_ids, $role );
            $rids = '(' . implode( ',', $role_ids ) . ')';
            $q->leftJoin( 'u.sys_roles', 'r' )
              ->andWhere( 'r.id IN ' . $rids );
        }

        $q = $q->getQuery();

        return $q->getResult();
    }

    public function searchCount( $search_string = NULL, $search_col = NULL, $from = NULL, $to = NULL, Role $role = NULL )
    {
        $q = $this->createQueryBuilder( 'u' )
                  ->select( 'COUNT(u.id)' );

        $from = $from instanceof \DateTime ? $from : NULL;
        $to   = $to instanceof \DateTime ? $to : NULL;
        if ( empty( $from ) || empty( $to ) ) {
            $from = $to = NULL;
        }
        if ( !empty( $from ) ) {
            $q->where( 'u.created_at >= :from AND u.created_at <= :to' )
              ->setParameters( array( 'from' => $from, 'to' => $to ) );
        }

        if ( !empty( $search_string ) ) {
            $q->where( '(u.username LIKE :search OR u.email LIKE :search)' )
              ->setParameter( 'search', '%' . $search_string . '%' );
        }

        if ( !empty( $role ) ) {
            $role_ids = array();
            $this->addRoleIdsToSearch( $role_ids, $role );
            $rids = '(' . implode( ',', $role_ids ) . ')';
            $q->leftJoin( 'u.sys_roles', 'r' )
              ->andWhere( 'r.id IN ' . $rids );
        }

        $q = $q->getQuery();

        return $q->getSingleScalarResult();
    }

    public function addRoleIdsToSearch( &$ids, Role $role = NULL )
    {
        if ( empty( $role ) ) return;
        $ids = is_array( $ids ) ? $ids : array();

        if ( !in_array( $role->getId(), $ids ) ) {
            $ids[ ] = $role->getId();
        }

        foreach ( $role->getChildren() as $child ) {
            $this->addRoleIdsToSearch( $ids, $child );
        }
    }

    public function getUsersCountBetween( \DateTime $from, \DateTime $to )
    {
        $q = $this->createQueryBuilder( 'u' )
                  ->select( 'COUNT(u.id)' )
                  ->where( 'u.created_at >= :from AND u.created_at <= :to' )
                  ->setParameters( array( 'from' => $from, 'to' => $to ) )
                  ->getQuery();

        return $q->getSingleScalarResult();
    }
}
